name: "Barcode Detector"
layer {
  name: "input"
  type: "Python"
  top: "image"
  top: "mask"
  python_param {
    module: "image_input"
    layer: "ImageInput"
  }
}
layer {
  name: "flatMask"
  type: "Flatten"
  bottom: "mask"
  top: "flatMask"
}
layer {
  name: "encode1"
  type: "Convolution"
  bottom: "image"
  top: "encode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 64
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "encode1"
  top: "encode1"
}
layer {
  name: "encode2"
  type: "Convolution"
  bottom: "encode1"
  top: "encode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "encode2"
  top: "encode2"
}
layer {
  name: "encode3"
  type: "Convolution"
  bottom: "encode2"
  top: "encode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  convolution_param {
    num_output: 256
    kernel_size: 5
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "encode3"
  top: "encode3"
}
layer {
  name: "decode1"
  type: "InnerProduct"
  bottom: "encode3"
  top: "decode1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 250
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 15
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "decode1neuron"
  type: "Sigmoid"
  bottom: "decode1"
  top: "decode1"
}
#layer {
#  name: "decode2"
#  type: "InnerProduct"
#  bottom: "decode1"
#  top: "decode2"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 0
#  }
#  inner_product_param {
#    num_output: 500
#    weight_filler {
#      type: "gaussian"
#      std: 1
#      sparse: 15
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "decode2neuron"
#  type: "Sigmoid"
#  bottom: "decode2"
#  top: "decode2"
#}
#layer {
#  name: "decode3"
#  type: "InnerProduct"
#  bottom: "decode2"
#  top: "decode3"
#  param {
#    lr_mult: 1
#    decay_mult: 1
#  }
#  param {
#    lr_mult: 1
#    decay_mult: 0
#  }
#  inner_product_param {
#    num_output: 1000
#    weight_filler {
#      type: "gaussian"
#      std: 1
#      sparse: 15
#    }
#    bias_filler {
#      type: "constant"
#      value: 0
#    }
#  }
#}
#layer {
#  name: "decode3neuron"
#  type: "Sigmoid"
#  bottom: "decode3"
#  top: "decode3"
#}
layer {
  name: "decode4"
  type: "InnerProduct"
  bottom: "decode1"
  top: "decode4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
    decay_mult: 0
  }
  inner_product_param {
    num_output: 1200
    weight_filler {
      type: "gaussian"
      std: 1
      sparse: 15
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "decode4neuron"
  type: "Sigmoid"
  bottom: "decode4"
  top: "decode4"
}
# Calculate loss
layer {
  name: "loss"
  type: "EuclideanLoss"
  bottom: "flatMask"
  bottom: "decode4"
  top: "l2_error"
}